---
- name: Add Jenkins repository public GPG key.
  apt_key:
    url: http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key
  tags:
    - always
    - installation
    - jenkins

- name: Add Jenkins repository
  apt_repository:
    repo: deb http://pkg.jenkins-ci.org/debian binary/
  when: ansible_distribution == "Debian"
  tags:
    - always
    - installation
    - jenkins

- name: Add Jenkins PPA
  apt_repository:
    repo: ppa:webupd8team/java
  when: ansible_distribution == "Ubuntu"
  tags:
    - always
    - installation
    - jenkins

- name: Install Java packages from Debian Jessie backports repository
  apt:
    name: "{{ item }}"
    default_release: jessie-backports
    update_cache: yes
  with_items:
    - libcups2
    - openjdk-8-jre-headless
    - ca-certificates-java
  when: ansible_distribution == "Debian" and ansible_distribution_release == 'jessie'
  tags:
    - always
    - installation

- name: Install Java packages from Debian Stretch backports repository
  apt:
    name: "{{ item }}"
    default_release: stretch-backports
    update_cache: yes
  with_items:
    - libcups2
    - openjdk-8-jre-headless
    - ca-certificates-java
  when: ansible_distribution == "Debian" and ansible_distribution_release == 'stretch'
  tags:
    - always
    - installation

- name: Accept license non-iteractively
  shell: "echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections"
  when: ansible_distribution == "Ubuntu"
  tags:
    - always
    - installation

- name: Install Java packages
  apt:
    name: "{{ item }}"
    default_release: jessie-backports
    update_cache: yes
  with_items:
    - oracle-java8-installer
    - oracle-java8-set-default
  when: ansible_distribution == "Ubuntu"
  tags:
    - always
    - installation

- name: Install Jenkins
  apt:
    name: "{{ item }}"
    update_cache: yes
  with_items:
    - jenkins
  notify:
    - Start Jenkins
  tags:
    - always
    - installation
    - jenkins

- name: Add Jenkins user to sudoers
  lineinfile:
    regexp: "^%jenkins"
    insertafter: "^# %sudo"
    line: "%jenkins	ALL=(ALL:ALL) NOPASSWD: ALL"
    dest: /etc/sudoers
    backup: yes
    state: present
  tags:
    - always
    - configuration
    - jenkins

- name: Retrieve Jenkins home directory
  shell: "getent passwd jenkins | cut -d: -f6"
  register: jenkins_home
  tags:
    - always
    - configuration
    - jenkins

- name: Wait for Jenkins to start up before proceeding
  shell: "curl -D - --silent --max-time 5 http://localhost:8080/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false
  check_mode: no
  tags:
    - always

- name: Download Jenkins command line utility
  get_url:
    url: http://localhost:8080/jnlpJars/jenkins-cli.jar
    dest: "{{ jenkins_home.stdout }}"
    owner: jenkins
    group: jenkins
    mode: 0644
  become: yes
  become_user: jenkins
  tags:
    - always

- name: Remove Jenkins security init scripts after first startup
  file:
    path: "{{ jenkins_home.stdout }}/init.groovy.d/basic-security.groovy"
    state: absent
  tags:
    - always

- name: Retrieve filename of latest Jenkins configuration backup from S3
  shell: "filepath=$(aws s3 ls s3://open-data-enterprise/jenkins/backup --recursive | sort | tail -n 1 | awk '{print $4}') && echo ${filepath##*/}"
  register: jenkins_backup_filename
  tags:
    - always
    - configuration
    - jenkins

- name: Download latest Jenkins configuration backup from S3
  shell: "aws s3 cp s3://{{ jenkins_backup_s3_bucket }}/{{ jenkins_backup_filename.stdout }} /tmp"
  args:
    creates: "/tmp/{{ jenkins_backup_filename.stdout }}"
  tags:
    - always
    - configuration
    - jenkins

- name: Unarchive Jenkins backup
  unarchive:
    remote_src: yes
    src: "/tmp/{{ jenkins_backup_filename.stdout }}"
    dest: "{{ jenkins_home.stdout }}"
    owner: jenkins
    group: jenkins
    mode: 0755
  tags:
    - always
    - configuration
    - jenkins

- name: Get list of Jenkins plugins to install
  command: "cat {{ jenkins_home.stdout }}/plugins.txt"
  register: jenkins_plugins
  tags:
    - always
    - configuration
    - jenkins

- name: Install Jenkins plugins
  jenkins_plugin:
    name: "{{ item }}"
    url_username: "{{ jenkins_admin_username }}"
    url_password: "{{ jenkins_admin_password }}"
  with_items: "{{ jenkins_plugins.stdout_lines }}"
  notify: Restart Jenkins
  tags:
    - always
    - configuration
    - jenkins

- name: Create Let's Encrypt directory
  file:
    name: "{{ letsencrypt_root }}"
    state: directory
  tags:
    - never
    - configuration
    - jenkins
    - production
    - ssl-cert

- name: Compile Let's Encrypt Nginx testing configuration for Jenkins
  template:
    src: jenkins_letsencrypt.conf.j2
    dest: /etc/nginx/sites-available/jenkins
  notify: Restart Nginx
  tags:
    - never
    - configuration
    - jenkins
    - production
    - ssl
    - ssl-cert

- name: Set up SSL certificate
  shell: "certbot certonly -n --webroot -w {{ letsencrypt_root }} -m {{ letsencrypt_email }} --agree-tos -d {{ jenkins_hostname }}"
  args:
    creates: "/etc/letsencrypt/live/{{ jenkins_hostname }}"
  tags:
    - never
    - configuration
    - jenkins
    - production
    - ssl
    - ssl-cert

- name: Compile Nginx configuration for Jenkins
  template:
    src: jenkins.conf.j2
    dest: /etc/nginx/sites-available/jenkins
  tags:
    - never
    - configuration
    - jenkins
    - production
    - ssl

- name: Enable site for Jenkins
  file:
    src: /etc/nginx/sites-available/jenkins
    dest: /etc/nginx/sites-enabled/jenkins
    state: link
  notify: Restart Nginx
  tags:
    - never
    - configuration
    - jenkins
    - production
